[{"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\index.js":"1","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\App.js":"2","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\store.js":"3","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\util\\AuthRoute.js":"4","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\actions\\userActions.js":"5","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\page404.js":"6","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\types.js":"7","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\login.js":"8","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\home.js":"9","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\user.js":"10","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\signup.js":"11","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\profile.js":"12","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\layout\\Navbar.js":"13","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\actions\\dataActions.js":"14","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\reducers\\uiReducer.js":"15","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\reducers\\dataReducer.js":"16","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\reducers\\userReducer.js":"17","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\layout\\Sidebar.js":"18","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\profile\\Profile.js":"19","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\profile\\StaticProfile.js":"20","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\ProfileTweets.js":"21","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\Tweet.js":"22","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\PostTweet.js":"23","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\profile\\EditDetails.js":"24","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\DeleteTweet.js":"25","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\TweetDialog.js":"26","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\LikeTweet.js":"27","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\TweetForm.js":"28","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\Comments.js":"29"},{"size":200,"mtime":1608647658354,"results":"30","hashOfConfig":"31"},{"size":2330,"mtime":1610990119293,"results":"32","hashOfConfig":"31"},{"size":778,"mtime":1609015192858,"results":"33","hashOfConfig":"31"},{"size":632,"mtime":1609023250537,"results":"34","hashOfConfig":"31"},{"size":2916,"mtime":1610912826822,"results":"35","hashOfConfig":"31"},{"size":1471,"mtime":1610919701658,"results":"36","hashOfConfig":"31"},{"size":809,"mtime":1610918479289,"results":"37","hashOfConfig":"31"},{"size":3923,"mtime":1610919689401,"results":"38","hashOfConfig":"31"},{"size":1632,"mtime":1610999155768,"results":"39","hashOfConfig":"31"},{"size":4537,"mtime":1610919970222,"results":"40","hashOfConfig":"31"},{"size":4997,"mtime":1610919718698,"results":"41","hashOfConfig":"31"},{"size":2756,"mtime":1610919707678,"results":"42","hashOfConfig":"31"},{"size":2612,"mtime":1610918479289,"results":"43","hashOfConfig":"31"},{"size":3550,"mtime":1610918479289,"results":"44","hashOfConfig":"31"},{"size":891,"mtime":1610900234092,"results":"45","hashOfConfig":"31"},{"size":1829,"mtime":1610918479289,"results":"46","hashOfConfig":"31"},{"size":1483,"mtime":1610918479289,"results":"47","hashOfConfig":"31"},{"size":3761,"mtime":1610921667989,"results":"48","hashOfConfig":"31"},{"size":6808,"mtime":1610631031950,"results":"49","hashOfConfig":"31"},{"size":3000,"mtime":1610890630006,"results":"50","hashOfConfig":"31"},{"size":335,"mtime":1610918473022,"results":"51","hashOfConfig":"31"},{"size":3424,"mtime":1610918864111,"results":"52","hashOfConfig":"31"},{"size":4277,"mtime":1610989475793,"results":"53","hashOfConfig":"31"},{"size":4493,"mtime":1610990176672,"results":"54","hashOfConfig":"31"},{"size":2431,"mtime":1610918479289,"results":"55","hashOfConfig":"31"},{"size":5503,"mtime":1610999018513,"results":"56","hashOfConfig":"31"},{"size":2711,"mtime":1610918479289,"results":"57","hashOfConfig":"31"},{"size":4612,"mtime":1610918479289,"results":"58","hashOfConfig":"31"},{"size":2272,"mtime":1610631165062,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1xout82",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"62"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\index.js",[],["131","132"],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\App.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\store.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\util\\AuthRoute.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\page404.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\types.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\login.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\home.js",["133"],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\user.js",["134"],"import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'; \r\nimport axios from 'axios'; \r\nimport Link from 'react-router-dom/Link'; \r\n\r\n// MUI \r\nimport Grid from '@material-ui/core/Grid'\r\n\r\n// Redux  \r\nimport { connect } from 'react-redux'; \r\nimport { getUserData } from '../redux/actions/dataActions'; \r\n\r\n// Components \r\nimport Tweet from '../components/tweet/Tweet'; \r\nimport StaticProfile from '../components/profile/StaticProfile';\r\nimport { CircularProgress, Paper, Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button'; \r\n\r\n// Styling \r\nimport '../style/user.css'\r\nimport { profile } from './profile';\r\n\r\n\r\nexport class user extends Component {\r\n\r\n    state = {\r\n        profile: null,\r\n        error: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        // get the ID sendt\r\n        const user = this.props.match.params.userID; \r\n        \r\n        // Get the tweets of the user\r\n        this.props.getUserData(user); \r\n\r\n        // Get the details of the user \r\n        axios.get(`/user/${user}`)\r\n            .then(res => {\r\n                this.setState({\r\n                    profile: res.data.user,\r\n                });\r\n                \r\n            }).catch((err) => {\r\n                this.setState({\r\n                    error: err.response.data\r\n                })\r\n                console.log(err.response.data)\r\n            }); \r\n    }\r\n\r\n    render() {\r\n        document.title=\"Tweetify - User\";\r\n        const { tweets, loading } = this.props.data; \r\n        const { error } = this.state; \r\n        const { user } = this.props.user; \r\n\r\n        if ( user.ID === this.props.match.params.userID ) {\r\n            this.props.history.push(`/profile/${this.props.match.params.userID}`); \r\n        }\r\n        \r\n        let userMarkup; \r\n\r\n        if (!error) {\r\n\r\n            // Loop through the tweets \r\n            let TweetsMarkup = null; \r\n\r\n            if (!loading) {\r\n\r\n                 // create the markup for the user\r\n                userMarkup = \r\n                <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\" spacing={3}>\r\n                    <Grid item sm={8} xs={12}>\r\n                        {this.state.profile === null ? (\r\n                            <p><CircularProgress /></p>\r\n                        ) : (<StaticProfile profile={this.state.profile} />)}\r\n                    </Grid>\r\n\r\n                    <Grid item sm={8} xs={12}>\r\n                        <Typography variant=\"h5\" paddingBottom=\"10px\" color=\"primary\">Tweets posted</Typography>\r\n                        {TweetsMarkup}\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                if (tweets === null) {\r\n                    <p>This user has not made any tweets yet.</p>\r\n                } else {\r\n                    TweetsMarkup = tweets.map(tweet => <Tweet key={tweet.TweetId} tweet={tweet} />);\r\n                }\r\n\r\n            } else {\r\n                TweetsMarkup = <CircularProgress />\r\n            }\r\n\r\n            // create the markup for the user\r\n            userMarkup = \r\n                <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\" spacing={3}>\r\n                    <Grid item sm={8} xs={12}>\r\n                        {this.state.profile === null ? (\r\n                            <p><CircularProgress /></p>\r\n                        ) : (<StaticProfile profile={this.state.profile} />)}\r\n                    </Grid>\r\n\r\n                    <Grid item sm={8} xs={12}>\r\n                        <Typography variant=\"h5\" paddingBottom=\"10px\" color=\"primary\">Tweets posted</Typography>\r\n                        {TweetsMarkup}\r\n                    </Grid>\r\n                </Grid>\r\n        } else {\r\n            userMarkup = \r\n                <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\" xs={12}>\r\n                    <Paper className=\"not-found\">\r\n                        <Typography variant=\"h5\">{error.error}</Typography>\r\n                        <Button className=\"not-found-btn\" variant=\"contained\" color=\"primary\" component={Link} to=\"/\">Go back</Button>\r\n                    </Paper>\r\n                </Grid>        \r\n        }\r\n      \r\n        return userMarkup;\r\n    }\r\n}\r\n\r\nuser.propTypes = {\r\n    user: PropTypes.object.isRequired,\r\n    getUserData: PropTypes.func.isRequired, \r\n    data: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.user,\r\n    data: state.data\r\n})\r\n\r\nexport default connect(mapStateToProps, {getUserData})(user); \r\n","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\signup.js",["135","136"],"import React, { Component } from 'react'; \r\nimport icon from '../images/tweetify.svg';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n// UI\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport '../style/signup.css'; \r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n// Redux \r\nimport { connect } from 'react-redux'; \r\nimport { signupUser } from '../redux/actions/userActions'; \r\nimport { Paper } from '@material-ui/core';\r\n\r\n\r\n// styling for MUI \r\nconst styles = {\r\n    btn: {\r\n        marginTop: \"20px\", \r\n        marginBottom: \"15px\"\r\n    },\r\n\r\n    input: {\r\n        margin: \"6px 0px\"\r\n    },\r\n\r\n    error: {\r\n        color: \"red\",\r\n        marginTop: \"10px\", \r\n        fontSize: \"0.8rem\"\r\n    },\r\n\r\n    spinner: {\r\n        marginTop: \"10px\"\r\n    }\r\n};\r\n\r\n\r\nclass signup extends Component {\r\n       \r\n    constructor() {\r\n        super(); \r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            name: '',\r\n            handle: '',\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.UI.errors) {\r\n            this.setState({ errors: nextProps.UI.errors });\r\n        }\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault(); \r\n\r\n        // start the loading\r\n        this.setState({\r\n            loading: true\r\n        }); \r\n\r\n        // get the data given\r\n        const userData = {\r\n            email: this.state.email, \r\n            password: this.state.password, \r\n            confirmPassword: this.state.confirmPassword,\r\n            name: this.state.name, \r\n            handle: this.state.handle, \r\n        };\r\n\r\n        this.props.signupUser(userData, this.props.history);\r\n        \r\n    };\r\n\r\n    render() {\r\n        document.title=\"Tweetify - Signup\";\r\n        const { classes, UI: { loading } } = this.props; \r\n        const { errors } = this.state; \r\n\r\n        return (\r\n            <Paper className=\"auth-form\">\r\n                <div className=\"auth-form-top\">\r\n                    <img className=\"logo\" src={icon} alt=\"tweet emoji\" />\r\n                    <Typography variant=\"h2\">Sign Up</Typography>\r\n                    <Typography variant=\"subtitle1\">Sign up for an account for free</Typography>\r\n                </div>\r\n\r\n                <form noValidate onSubmit={this.handleSubmit}>\r\n\r\n                    <TextField className={classes.input}  id=\"name\" name=\"name\" type=\"text\" helperText={errors.name} error={errors.name ? true : false}\r\n                    label=\"Your name\" value={this.state.name} onChange={this.handleChange} fullWidth />\r\n\r\n                    <TextField className={classes.input}  id=\"email\" name=\"email\" type=\"email\" helperText={errors.email} error={errors.email ? true : false}\r\n                    label=\"Email\" value={this.state.email} onChange={this.handleChange} fullWidth />\r\n\r\n                    <TextField className={classes.input} id=\"password\" name=\"password\" type=\"password\" helperText={errors.password} error={errors.password ? true : false}\r\n                    label=\"Password\" value={this.state.password} onChange={this.handleChange} fullWidth />\r\n\r\n                    <TextField className={classes.input} id=\"confirmPassword\" name=\"confirmPassword\" type=\"password\" helperText={errors.confirmPassword} error={errors.confirmPassword ? true : false}\r\n                                        label=\"Confirm Password\" value={this.state.confirmPassword} onChange={this.handleChange} fullWidth />\r\n\r\n                    <TextField className={classes.input} id=\"handle\" name=\"handle\" type=\"text\" helperText={errors.handle} error={errors.handle ? true : false}\r\n                                        label=\"Handle\" value={this.state.handle} onChange={this.handleChange} fullWidth />\r\n\r\n                    {errors.general && (\r\n                        <Typography className={classes.error} variant=\"body2\"> {errors.general} </Typography>\r\n                    )}\r\n\r\n                    <Button className={classes.btn} type=\"submit\" variant=\"contained\" color=\"primary\">Signup</Button>\r\n\r\n                    <small>Already an account? Login <Link to=\"/login\">here</Link></small>\r\n                </form>\r\n\r\n            </Paper>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\n\r\nsignup.propTypes = {\r\n    classes: PropTypes.object.isRequired, \r\n    user: PropTypes.object.isRequired, \r\n    UI: PropTypes.object.isRequired, \r\n    signupUser: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user, \r\n    UI: state.UI\r\n}); \r\n\r\n\r\n\r\nexport default connect(mapStateToProps, { signupUser })(withStyles(styles)(signup)); ","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\pages\\profile.js",["137","138"],"\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'; \r\n\r\n// MUI \r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'; \r\n\r\n// Components \r\nimport Profile from '../components/profile/Profile';\r\nimport ProfileTweets from '../components/tweet/ProfileTweets'; \r\nimport Tweet from '../components/tweet/Tweet';\r\n\r\n// Redux \r\nimport { connect } from 'react-redux'; \r\nimport { getUserData } from '../redux/actions/dataActions'; \r\n\r\n\r\n// Styling \r\nimport '../style/user.css'\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nexport class profile extends Component {\r\n\r\n    state = {\r\n        userID: ''\r\n    }\r\n \r\n    componentDidMount() {\r\n\r\n        // get the ID sendt\r\n        const user = this.props.match.params.userID; \r\n\r\n        // Get the tweets of the user\r\n        this.props.getUserData(user); \r\n    }\r\n\r\n    render() {\r\n        document.title=\"Tweetify - Profile\";\r\n        const { tweets, loading } = this.props.data; \r\n        const { authenticated, user: { ID } } = this.props.user\r\n\r\n        let TweetsMarkup = null; \r\n        let profileMarkup = null; \r\n\r\n        if (!loading) {\r\n            \r\n            // Check if ID given is correct\r\n            if (authenticated && ID === this.props.match.params.userID) {\r\n\r\n                profileMarkup = <Profile />\r\n\r\n                // Check the tweets made\r\n                if (tweets === undefined || tweets.length == 0) {\r\n                    TweetsMarkup = <p>You have not posted any tweets</p>\r\n                } else {\r\n                    TweetsMarkup = tweets.map(tweet => <Tweet key={tweet.TweetId} tweet={tweet} />);\r\n                }\r\n\r\n            } else {\r\n                // Not own profile, redirect to viewing other profiles\r\n                this.props.history.push(`/users/${this.props.match.params.userID}`); \r\n            }\r\n\r\n        } else {\r\n            TweetsMarkup = <CircularProgress />\r\n        }\r\n\r\n        return (\r\n\r\n            <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\" spacing={3}>\r\n                <Grid item sm={8} xs={12}>\r\n                    {profileMarkup}\r\n                </Grid>\r\n\r\n                <Grid item sm={8} xs={12}>\r\n                    <Typography variant=\"h5\" paddingBottom=\"10px\" color=\"primary\">Tweets posted</Typography>\r\n                    {TweetsMarkup}\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nprofile.propTypes = {\r\n    user: PropTypes.object.isRequired,\r\n    data: PropTypes.func.isRequired,\r\n    getUserData: PropTypes.func.isRequired, \r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.user,\r\n    data: state.data\r\n})\r\n\r\nexport default connect(mapStateToProps, {getUserData})(profile); \r\n","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\layout\\Navbar.js",["139"],"import React, { Component } from 'react'; \r\nimport Link from 'react-router-dom/Link'; \r\n\r\n// Material UI \r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar'; \r\nimport Button from '@material-ui/core/Button'; \r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'; \r\n\r\n// Icons \r\nimport HomeIcon from '@material-ui/icons/Home'; \r\nimport ProfileIcon from '@material-ui/icons/Person'; \r\nimport LogoutIcon from '@material-ui/icons/ExitToApp'\r\nimport ExploreIcon from '@material-ui/icons/Public'\r\n\r\n// Actions \r\nimport { logoutUser } from '../../redux/actions/userActions'; \r\n\r\n// Components \r\nimport PostTweet from '../tweet/PostTweet'; \r\n\r\nexport class Navbar extends Component {\r\n\r\n\r\n    // Log out user\r\n    handleLogout = () => {\r\n        this.props.logoutUser();\r\n    }\r\n\r\n    render() {\r\n\r\n        const { \r\n            user: {\r\n                authenticated,\r\n                user: {\r\n                    ID\r\n                }\r\n            }\r\n        } = this.props; \r\n\r\n\r\n        console.log(\"Auth: \", authenticated); \r\n\r\n        let navOptions; \r\n\r\n        if (!authenticated) {\r\n            navOptions = <div className=\"nav-options\"> \r\n                <Button startIcon={<HomeIcon />} color=\"inherit\" component={Link} to=\"/\">Home</Button>\r\n                <Button color=\"inherit\" component={Link} to=\"/login\">Login</Button>\r\n                <Button color=\"inherit\" component={Link} to=\"/signup\">Signup</Button> \r\n            </div>\r\n        } else {\r\n            navOptions = <div className=\"nav-options\">\r\n                <Button startIcon={<HomeIcon />} color=\"inherit\" component={Link} to=\"/\">Home</Button>\r\n                <Button startIcon={<ProfileIcon />} color=\"inherit\" component={Link} to={`/profile/${ID}`}>Profile</Button>\r\n                <Button startIcon={<ExploreIcon />} color=\"inherit\" component={Link} to=\"/\">Explore</Button>\r\n                <Button startIcon={<LogoutIcon />} color=\"inherit\" onClick={this.handleLogout}>Logout</Button>\r\n            </div>\r\n        }\r\n\r\n        return (\r\n            <AppBar>\r\n                <Toolbar className=\"nav-container\">\r\n                    \r\n                    {navOptions}\r\n                </Toolbar>\r\n            </AppBar>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user\r\n}); \r\n\r\n// Action props\r\nconst mapActionToProps = { logoutUser }; \r\n\r\nNavbar.propTypes = {\r\n    user: PropTypes.object.isRequired, \r\n    logoutUser: PropTypes.func.isRequired,\r\n}; \r\n\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(Navbar); ","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\actions\\dataActions.js",["140"],"import { SET_Tweets, LOADING_DATA, LIKE_Tweet, UNLIKE_Tweet, DELETE_Tweet, LOADING_UI, SET_ERRORS, CLEAR_ERRORS, POST_Tweet, SET_Tweet, STOP_LOADING_UI, SUBMIT_COMMENT } from '../types'; \r\nimport axios from 'axios'; \r\n\r\n// Get all tweets \r\nexport const getTweets = () => dispatch => {\r\n    dispatch({ type: LOADING_DATA }); \r\n    axios.get('/tweets')\r\n        .then(res => {\r\n            \r\n            dispatch({\r\n                type: SET_Tweets,\r\n                payload: res.data\r\n            });\r\n\r\n        }).catch(err => {\r\n            dispatch({\r\n                type: SET_Tweets, \r\n                payload: []\r\n            }); \r\n        }); \r\n}\r\n\r\n// Get a single tweet\r\nexport const getTweet = (TweetId) => (dispatch) => {\r\n    dispatch({ type: LOADING_UI });\r\n    \r\n    axios.get(`/tweets/${TweetId}`)   \r\n        .then(res => {\r\n            dispatch({\r\n                type: SET_Tweet, \r\n                payload: res.data\r\n            }); \r\n\r\n            dispatch({ type: STOP_LOADING_UI}); \r\n\r\n        }).catch((err) => {\r\n            console.log(err); \r\n        })\r\n\r\n}\r\n\r\n// Post a tweet \r\nexport const postTweet = (newTweet) => (dispatch) => {\r\n    dispatch({ type: LOADING_UI })\r\n    axios.post('/tweets', newTweet)\r\n        .then(res => {\r\n            dispatch({\r\n                type: POST_Tweet, \r\n                payload: res.data\r\n            }); \r\n\r\n            dispatch(clearErrors())\r\n\r\n        }).catch(err => {\r\n            dispatch({\r\n                type: SET_ERRORS, \r\n                payload: err.response.data\r\n            })\r\n            \r\n        })\r\n}\r\n\r\n// Like a tweet\r\nexport const likeTweet = (TweetId) => (dispatch) => {\r\n    \r\n    axios\r\n      .get(`/tweets/${TweetId}/like`)\r\n      .then((res) => {\r\n        dispatch({\r\n          type: LIKE_Tweet,\r\n          payload: res.data\r\n        });\r\n\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n\r\n// Unlike tweet \r\nexport const unlikeTweet = (TweetId) => (dispatch) => {\r\n    axios.get(`/tweets/${TweetId}/unlike`)\r\n        .then(res => {\r\n            dispatch({\r\n                type: UNLIKE_Tweet, \r\n                payload: res.data\r\n            }); \r\n        }).catch(err => {\r\n            console.log(err); \r\n        })\r\n}\r\n\r\n// Submit a comment \r\nexport const submitComment =(TweetId, commentData) => (dispatch) => {\r\n    axios.post(`/tweets/${TweetId}/comment`, commentData)\r\n        .then(() => {\r\n            dispatch(getTweet(TweetId));\r\n            dispatch(clearErrors());\r\n\r\n        }).catch(err => {\r\n            dispatch({\r\n                type: SET_ERRORS, \r\n                payload: err.response.data\r\n            });\r\n        });\r\n\r\n}\r\n\r\n\r\n// Delete a tweet \r\nexport const deleteTweet = (TweetId) => (dispatch) => {\r\n    axios.delete(`/tweets/${TweetId}/delete`)\r\n        .then(() => {\r\n            dispatch({ type: DELETE_Tweet, payload: TweetId})\r\n        })\r\n        .catch((err) => {\r\n            console.log(err); \r\n        })\r\n}\r\n\r\n// Get data about a user you are viewing / viewing a user profile \r\nexport const getUserData = (user) => (dispatch) => {\r\n    dispatch({ type: LOADING_DATA }); \r\n\r\n    axios.get(`/user/${user}`)\r\n        .then(res => {\r\n        \r\n            dispatch({\r\n                type: SET_Tweets, \r\n                payload: res.data.tweets\r\n            }); \r\n\r\n        }).catch((err) => {\r\n            dispatch({\r\n                type: SET_Tweets, \r\n                payload: []\r\n            })\r\n        }); \r\n}\r\n\r\nexport const clearErrors = () => dispatch => {\r\n    dispatch ({ type: CLEAR_ERRORS }); \r\n}","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\reducers\\uiReducer.js",["141"],"import { SET_ERRORS, CLEAR_ERRORS, LOADING_UI, STOP_LOADING_UI } from '../types'; \r\n\r\nconst initialState = {\r\n    loading: false, \r\n    errors: null\r\n}; \r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case SET_ERRORS: \r\n            return {\r\n                ...state, \r\n                loading: false, \r\n                errors: action.payload\r\n            }\r\n        \r\n        case CLEAR_ERRORS: \r\n            return {\r\n                ...state, \r\n                loading: false, \r\n                errors: null\r\n            }\r\n\r\n        case LOADING_UI: \r\n            return {\r\n                ...state, \r\n                loading: true\r\n            }; \r\n\r\n        case STOP_LOADING_UI: \r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }; \r\n\r\n        default: \r\n            return state; \r\n    }\r\n}","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\reducers\\dataReducer.js",["142"],"import { SET_Tweet, LIKE_Tweet, UNLIKE_Tweet, LOADING_DATA, SET_Tweets, DELETE_Tweet, POST_Tweet } from '../types'; \r\n\r\nconst initialState = {\r\n    tweets: [], \r\n    tweet: {}, \r\n    loading: false \r\n}; \r\n\r\nlet index; \r\n\r\nexport default function(state = initialState, action) {\r\n    \r\n    switch(action.type) {\r\n        case LOADING_DATA: \r\n            return {\r\n                ...state, \r\n                loading: true\r\n            }\r\n        case SET_Tweets: \r\n            return {\r\n                ...state, \r\n                tweets: action.payload, \r\n                loading: false\r\n            }\r\n        \r\n        case SET_Tweet: \r\n            return {\r\n                ...state, \r\n                tweet: action.payload\r\n            }\r\n        \r\n        case LIKE_Tweet: \r\n        case UNLIKE_Tweet:\r\n            index = state.tweets.findIndex((tweet) => tweet.TweetId === action.payload.TweetId); \r\n\r\n            // update the tweet in the tweets object\r\n            state.tweets[index] = action.payload; \r\n            \r\n            // Update the single tweet object aswell \r\n            if (state.tweet.TweetId === action.payload.TweetId) {\r\n                state.tweet = action.payload\r\n            }\r\n            \r\n            return {\r\n                ...state\r\n            }\r\n        \r\n        case DELETE_Tweet: \r\n            index = state.tweets.findIndex((tweet) => tweet.TweetId === action.payload); \r\n            state.tweets.splice(index, 1); \r\n            return {\r\n                ...state\r\n            }; \r\n        \r\n        case POST_Tweet: \r\n            return {\r\n                ...state, \r\n                tweets: [\r\n                    action.payload, \r\n                    ...state.tweets\r\n                ]\r\n            }\r\n    \r\n        default: \r\n            return state;                 \r\n    }\r\n}","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\redux\\reducers\\userReducer.js",["143"],"import { SET_USER, SET_AUTHENTICATED, SET_UNAUTHENTICATED, LOADING_USER, LIKE_Tweet, UNLIKE_Tweet } from '../types'; \r\n\r\nconst initialState = {\r\n    authenticated: false, \r\n    credentials: {}, \r\n    likes: [], \r\n    loading: false,\r\n    notifications: [], \r\n    user: {\r\n\r\n    }\r\n}; \r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case SET_AUTHENTICATED: \r\n            return {\r\n                ...state, \r\n                authenticated: true, \r\n\r\n            }; \r\n\r\n        case SET_UNAUTHENTICATED: \r\n            return initialState; \r\n\r\n        case SET_USER: \r\n            return {\r\n                authenticated: true, \r\n                loading: false,\r\n                ...action.payload\r\n            }; \r\n\r\n        case LOADING_USER: \r\n            return {\r\n                ...state, \r\n                loading: true\r\n            }\r\n\r\n        case LIKE_Tweet: \r\n            return {\r\n                ...state, \r\n                likes: [\r\n                    ...state.likes, \r\n                    {\r\n                        userHandle: state.user.handle, \r\n                        TweetId: action.payload.TweetId\r\n                    }\r\n                ]\r\n            }\r\n        \r\n        case UNLIKE_Tweet: \r\n            return {\r\n                ...state, \r\n                likes: state.likes.filter((like) => like.TweetId !== action.payload.TweetId)\r\n            }; \r\n\r\n        default: \r\n            return state; \r\n    }\r\n}\r\n","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\layout\\Sidebar.js",["144","145","146","147","148"],"import React, { Component } from 'react'; \r\nimport PropTypes from 'prop-types'; \r\nimport withStyles from '@material-ui/core/styles/withStyles'; \r\nimport { Link } from 'react-router-dom'; \r\n\r\n// MUI \r\nimport Button from '@material-ui/core/Button'\r\nimport MuiLink from '@material-ui/core/Link'; \r\nimport Paper from '@material-ui/core/Paper'; \r\nimport { CircularProgress, IconButton, Typography } from '@material-ui/core';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'; \r\nimport { logoutUser } from '../../redux/actions/userActions'; \r\n\r\n// Styling \r\n\r\n// Components \r\nimport PostTweet from '../tweet/PostTweet'; \r\n\r\n\r\nconst styles = {\r\n    profileImg: {\r\n        borderRadius: '50%', \r\n        width: '100px',\r\n        height: '100px',\r\n        marginRight: '10px'\r\n    }, \r\n    top: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'start',\r\n        padding: '5px 20px'\r\n    },\r\n    actions: {\r\n        display: 'flex',\r\n        alignItems: 'center', \r\n        flexDirection: 'column',\r\n        paddingBottom: '15px'\r\n    },\r\n    authButtons: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    authButton: {\r\n        margin: '20px 10px'\r\n    }\r\n}\r\n\r\nclass Sidebar extends Component {\r\n    render() {\r\n\r\n        const {\r\n            classes,\r\n            user: {\r\n              user: { name, handle, imageURL, bio, website, location, createdAtText, ID },\r\n              loading,\r\n              authenticated\r\n            }\r\n        } = this.props;\r\n    \r\n        let sidebarMarkup; \r\n        if (!loading) {\r\n\r\n            if (authenticated) {\r\n                sidebarMarkup = \r\n                <Paper>\r\n                    <div className={classes.top}>\r\n                        <img className={classes.profileImg} src={imageURL} alt=\"profile\" />\r\n                        <div className={classes.profileName}>\r\n                            <Typography variant=\"h5\">{name}</Typography>\r\n                            <MuiLink className={classes.name} component={Link} to={`profile/${ID}`} color=\"primary\" variant=\"h6\">\r\n                            @{handle}\r\n                            </MuiLink>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={classes.actions}>\r\n                        <PostTweet />\r\n                    </div>\r\n                </Paper>\r\n            } else {\r\n                sidebarMarkup = \r\n                <Paper>\r\n                    <div>\r\n                        <Typography variant=\"h6\" align=\"center\">\r\n                            No profile found, please login.\r\n                        </Typography>\r\n\r\n                        <div className={classes.authButtons}>\r\n                        <Button className={classes.authButton} variant=\"contained\" color=\"primary\" component={Link} to=\"/login\">\r\n                            Login\r\n                        </Button>\r\n\r\n                        <Button className={classes.authButton} variant=\"contained\" color=\"secondary\" component={Link} to=\"/signup\">\r\n                            Signup\r\n                        </Button> \r\n                        </div>\r\n\r\n                    </div>\r\n                </Paper>\r\n            }\r\n        } else {\r\n            sidebarMarkup = <CircularProgress size={50} />\r\n        }\r\n\r\n        return sidebarMarkup; \r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user\r\n});\r\n\r\n// Action props\r\nconst mapActionToProps = { logoutUser }; \r\n\r\nSidebar.propTypes = {\r\n    user: PropTypes.object.isRequired, \r\n    classes: PropTypes.object.isRequired,\r\n    logoutUser: PropTypes.func.isRequired\r\n}; \r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(Sidebar)); \r\n\r\n","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\profile\\Profile.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\profile\\StaticProfile.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\ProfileTweets.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\Tweet.js",["149","150"],"import React, { Component } from 'react'; \r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Link from 'react-router-dom/Link';\r\nimport moment from 'moment'; \r\n\r\n// MUI Stuff\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton'; \r\n\r\n// Icons\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\n\r\n\r\n// styling \r\nimport '../../style/tweet.css';\r\nimport PropTypes from 'prop-types'; \r\n\r\n// Redux \r\nimport { connect } from 'react-redux'; \r\n\r\n// Components \r\nimport DeleteTweet from './DeleteTweet'; \r\nimport TweetDialog from './TweetDialog'; \r\nimport LikeButton from './LikeTweet'; \r\n\r\n\r\nconst styles = {\r\n    card: {\r\n        display: 'flex'\r\n    }, \r\n    cardImage: {\r\n        height: \"100px\", \r\n        width: \"100px\"\r\n    }\r\n\r\n}\r\n\r\nexport class Tweet extends Component {\r\n\r\n\r\n    render() {\r\n        const {\r\n            tweet,\r\n            user: {\r\n                user: {\r\n                    name,\r\n                    ID\r\n                }\r\n            }\r\n        } = this.props; \r\n\r\n\r\n        let owner = false; \r\n        // get the counts for likes and comments \r\n        let deleteButton = null; \r\n        let likeCount = tweet.likeCount;\r\n        let commentCount = tweet.commentCount;  \r\n        let profileLink; \r\n        \r\n        // check if owner of the tweet\r\n        if (tweet.creatorID === ID) {\r\n            owner = true; \r\n        }\r\n\r\n        if (owner) {\r\n            deleteButton = <DeleteTweet TweetId={tweet.TweetId} />\r\n            profileLink = `/profile/${ID}`; \r\n        } else {\r\n            profileLink = `/users/${tweet.creatorID}`; \r\n        }\r\n    \r\n        return (\r\n            <Card className=\"card\">\r\n                <CardMedia image={tweet.userImage} title=\"Profile image\" className=\"card-image\" />\r\n\r\n                <CardContent>\r\n                    <Typography variant=\"h5\" component={Link} to={profileLink} color=\"primary\"> @{tweet.handle}</Typography>\r\n                    {deleteButton}\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">{moment(tweet.createdAtText).fromNow()}</Typography>\r\n                    <Typography variant=\"body1\">{tweet.body}</Typography>\r\n\r\n                    <div className=\"tweet-buttons\">\r\n                        \r\n                        <LikeButton TweetId={tweet.TweetId} />\r\n                        <span>{likeCount} likes</span>\r\n                        \r\n                        <Tooltip title=\"comments\" placement=\"right-start\">\r\n                            <IconButton><ChatIcon color=\"primary\" /> </IconButton>\r\n                        </Tooltip> \r\n                        <span>{commentCount} comments</span>\r\n\r\n                        <TweetDialog TweetId={tweet.TweetId} user={tweet.user} />\r\n                    </div>\r\n\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nTweet.propTypes = {\r\n    user: PropTypes.object.isRequired, \r\n    tweet: PropTypes.object.isRequired, \r\n    classes: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.user\r\n}); \r\n\r\n\r\nexport default connect(mapStateToProps)(withStyles(styles)(Tweet)); ","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\PostTweet.js",["151"],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\profile\\EditDetails.js",["152","153"],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\DeleteTweet.js",["154"],"import React, { Component } from 'react'; \r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport PropTypes from 'prop-types'; \r\n\r\n// MUI \r\nimport Button from '@material-ui/core/Button'; \r\nimport Dialog from '@material-ui/core/Dialog'; \r\nimport DialogTitle from '@material-ui/core/DialogTitle'; \r\nimport DialogActions from '@material-ui/core/DialogActions'; \r\nimport IconButton from '@material-ui/core/IconButton'; \r\n\r\n// Icons \r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport MenuIcon from '@material-ui/icons/MoreVert';\r\n\r\n// Redux \r\nimport { connect } from 'react-redux'; \r\nimport { deleteTweet } from '../../redux/actions/dataActions'; \r\nimport { Tooltip } from '@material-ui/core';\r\n\r\nconst styles = {\r\n    deleteBtn: {\r\n        position: 'absolute', \r\n        left: '92%', \r\n        top: '3%'\r\n    }\r\n}\r\n\r\nexport class DeleteTweet extends Component {\r\n\r\n    state = {\r\n        open: false\r\n    };\r\n\r\n    handleOpen = () => {\r\n        this.setState({ open: true }); \r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false }); \r\n    }\r\n\r\n    deleteTweet = () => {\r\n        console.log(\"deleting\");\r\n        this.props.deleteTweet(this.props.TweetId); \r\n        this.setState({ open: false }); \r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props; \r\n\r\n\r\n        return (\r\n            <div>\r\n                <Tooltip title=\"Delete tweet\" placement=\"top\">\r\n                    <IconButton onClick={this.handleOpen} className={classes.deleteBtn}>\r\n                        <MenuIcon color=\"primary\" />\r\n                    </IconButton>\r\n                </Tooltip>\r\n\r\n                <Dialog open={this.state.open} onClose={this.handleClose} fullWidth maxWidth=\"sm\">\r\n                    <DialogTitle>Are you sure you want to delete this tweet? </DialogTitle>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color=\"primary\">Cancel</Button>\r\n                        <Button onClick={this.deleteTweet} color=\"secondary\">Delete</Button>\r\n                    </DialogActions>\r\n\r\n                </Dialog>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\ndeleteTweet.PropTypes = {\r\n    deleteTweet: PropTypes.func.isRequired, \r\n    classes: PropTypes.object.isRequired, \r\n    TweetId: PropTypes.string.isRequired\r\n}; \r\n\r\nexport default connect(\r\n    null,\r\n    { deleteTweet }\r\n  )(withStyles(styles)(DeleteTweet));","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\TweetDialog.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\LikeTweet.js",["155"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'; \r\nimport PropTypes from 'prop-types'; \r\n\r\n// MUI Stuff\r\nimport { Tooltip } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton'; \r\n\r\n\r\n// Icons \r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';  \r\nimport Favorite from '@material-ui/icons/Favorite';  \r\n\r\n\r\n// Redux \r\nimport { connect } from 'react-redux'; \r\nimport { likeTweet, unlikeTweet } from '../../redux/actions/dataActions'; \r\n\r\n\r\nexport class LikeButton extends Component {\r\n    \r\n    likedTweet = () => {\r\n        if (this.props.user.likes && this.props.user.likes.find(like => like.TweetId === this.props.TweetId)) {\r\n            return true; \r\n        } else {\r\n            return false; \r\n        }\r\n    }; \r\n\r\n    likeTweet = () => {\r\n        console.log(\"ID: \", this.props.TweetId); \r\n        this.props.likeTweet(this.props.TweetId); \r\n    };\r\n\r\n    unlikeTweet = () => {\r\n        this.props.unlikeTweet(this.props.TweetId); \r\n    };\r\n    \r\n    render() {\r\n\r\n        const { authenticated } = this.props.user\r\n\r\n        // Create the like button according to the auth state\r\n        let likeButton; \r\n\r\n        // if not, make a button that redirects to login \r\n        if (!authenticated) {\r\n            likeButton = \r\n            <Tooltip title=\"like\" placement=\"right-start\">\r\n                <IconButton component={Link} to=\"/login\"><FavoriteBorder color=\"primary\" /> </IconButton> \r\n            </Tooltip>   \r\n        } else {\r\n\r\n            // if already liked, make a button to undo like\r\n            if (this.likedTweet()) {\r\n                likeButton = \r\n                <Tooltip title=\"Undo like\" placement=\"right-start\">\r\n                    <IconButton onClick={this.unlikeTweet}><Favorite color=\"primary\" /> </IconButton> \r\n                </Tooltip> \r\n            } else {\r\n\r\n                // if not liked, make a button to like the tweet \r\n                likeButton = \r\n                <Tooltip title=\"like\" placement=\"right-start\">\r\n                    <IconButton onClick={this.likeTweet}><FavoriteBorder color=\"primary\" /> </IconButton> \r\n                </Tooltip>  \r\n            }\r\n        }\r\n\r\n        return likeButton; \r\n    }\r\n}\r\n\r\nlikeTweet.propTypes = {\r\n    user: PropTypes.object.isRequired, \r\n    TweetId: PropTypes.string.isRequired, \r\n    likeTweet: PropTypes.func.isRequired,\r\n    unlikeTweet: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user\r\n})\r\n\r\nconst mapActionsToProps = {\r\n    likeTweet, \r\n    unlikeTweet\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(LikeButton); \r\n","C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\TweetForm.js",[],"C:\\Users\\Sander\\Documents\\GitHub\\Screamify\\client\\src\\components\\tweet\\Comments.js",[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":6,"column":8,"nodeType":"162","messageId":"163","endLine":6,"endColumn":15},{"ruleId":"160","severity":1,"message":"164","line":21,"column":10,"nodeType":"162","messageId":"163","endLine":21,"endColumn":17},{"ruleId":"160","severity":1,"message":"165","line":11,"column":8,"nodeType":"162","messageId":"163","endLine":11,"endColumn":24},{"ruleId":"160","severity":1,"message":"166","line":95,"column":32,"nodeType":"162","messageId":"163","endLine":95,"endColumn":39},{"ruleId":"160","severity":1,"message":"167","line":11,"column":8,"nodeType":"162","messageId":"163","endLine":11,"endColumn":21},{"ruleId":"168","severity":1,"message":"169","line":54,"column":59,"nodeType":"170","messageId":"171","endLine":54,"endColumn":61},{"ruleId":"160","severity":1,"message":"172","line":23,"column":8,"nodeType":"162","messageId":"163","endLine":23,"endColumn":17},{"ruleId":"160","severity":1,"message":"173","line":1,"column":154,"nodeType":"162","messageId":"163","endLine":1,"endColumn":168},{"ruleId":"174","severity":1,"message":"175","line":8,"column":1,"nodeType":"176","endLine":39,"endColumn":2},{"ruleId":"174","severity":1,"message":"175","line":11,"column":1,"nodeType":"176","endLine":67,"endColumn":2},{"ruleId":"174","severity":1,"message":"175","line":14,"column":1,"nodeType":"176","endLine":60,"endColumn":2},{"ruleId":"160","severity":1,"message":"177","line":10,"column":28,"nodeType":"162","messageId":"163","endLine":10,"endColumn":38},{"ruleId":"160","severity":1,"message":"178","line":57,"column":47,"nodeType":"162","messageId":"163","endLine":57,"endColumn":50},{"ruleId":"160","severity":1,"message":"179","line":57,"column":52,"nodeType":"162","messageId":"163","endLine":57,"endColumn":59},{"ruleId":"160","severity":1,"message":"180","line":57,"column":61,"nodeType":"162","messageId":"163","endLine":57,"endColumn":69},{"ruleId":"160","severity":1,"message":"181","line":57,"column":71,"nodeType":"162","messageId":"163","endLine":57,"endColumn":84},{"ruleId":"160","severity":1,"message":"182","line":12,"column":8,"nodeType":"162","messageId":"163","endLine":12,"endColumn":14},{"ruleId":"160","severity":1,"message":"183","line":51,"column":21,"nodeType":"162","messageId":"163","endLine":51,"endColumn":25},{"ruleId":"160","severity":1,"message":"184","line":14,"column":8,"nodeType":"162","messageId":"163","endLine":14,"endColumn":15},{"ruleId":"160","severity":1,"message":"177","line":19,"column":10,"nodeType":"162","messageId":"163","endLine":19,"endColumn":20},{"ruleId":"185","severity":1,"message":"186","line":137,"column":85,"nodeType":"187","endLine":137,"endColumn":100},{"ruleId":"160","severity":1,"message":"188","line":13,"column":8,"nodeType":"162","messageId":"163","endLine":13,"endColumn":21},{"ruleId":"160","severity":1,"message":"182","line":7,"column":8,"nodeType":"162","messageId":"163","endLine":7,"endColumn":14},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","'profile' is defined but never used.","'CircularProgress' is defined but never used.","'loading' is assigned a value but never used.","'ProfileTweets' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'PostTweet' is defined but never used.","'SUBMIT_COMMENT' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'IconButton' is defined but never used.","'bio' is assigned a value but never used.","'website' is assigned a value but never used.","'location' is assigned a value but never used.","'createdAtText' is assigned a value but never used.","'Button' is defined but never used.","'name' is assigned a value but never used.","'AddIcon' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'DeleteOutline' is defined but never used.","no-global-assign","no-unsafe-negation"]